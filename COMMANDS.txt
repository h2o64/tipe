(* Vector Field - Smooth *)
Orientation.vector_field Orientation.getAngles Testing.test_image 16 true;;
Orientation.vector_field Orientation.getAngles_vector Testing.test_image 16;;

(* Vector Field *)
Orientation.vector_field Orientation.getAngles Testing.test_image 16 false;;
Orientation.vector_field Orientation.getAngles_vector Testing.test_image 16 false;;

(* Poincare *)
Poincare.display_sp Testing.test_image 16 48 Poincare.getAngleBetween;;
Poincare.display_sp Testing.test_image 16 48 Poincare.getAngleBetween_bis;;

(* Segmentation - fingerprint2 *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let seg_level = Image_Processing.getOptimalThreshold_otsu grey_test.matrix 16;;
let seg = Image_Processing.segmentation grey_test.matrix 16 seg_level;;
Testing.displayAnyMatrix seg;;

(* Sobel segmentation *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let seg_level = Image_Processing.getOptimalThreshold_otsu grey_test.matrix 16;;
let seg = Image_Processing.segmentation grey_test.matrix 16 seg_level;;
let sobel_seg = Image_Processing.sobel_segmentation seg true;;
Testing.align_matrix sobel_seg;;
Testing.displayAnyMatrix sobel_seg;;

(* Normalisation *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let norm = Image_Processing.normalisation grey_test.matrix;;
Testing.displayAnyMatrix norm;;

(* Gabor - Contextual Filtering *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let gabor = Image_Processing.getGabor grey_test.matrix 16;;
Testing.displayAnyMatrix gabor;;

(* Binarization *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let gabor = Image_Processing.getGabor grey_test.matrix 16;;
let bin = Image_Processing.binarization gabor 16;;
Testing.displayBin bin;;

(* Circle Test - Image Movement Difference *)
let circle_right = Images.import_image "Images/circle_right.png";;
let circle_left = Images.import_image "Images/circle_left.png";;
let grey_right = Images.imageToGreyScale circle_right;;
let grey_left = Images.imageToGreyScale circle_left;;
let bin_right = Testing.simpleBinarize grey_right.matrix;;
let bin_left = Testing.simpleBinarize grey_left.matrix;;
Image_Processing.img_mvt bin_right bin_left;;
Testing.displayBin bin_right;;

(* Thining - Test *)
let test_thin = Images.import_image "Images/guo-hall-thinning-src-img.jpg";;
let grey_thin = Images.imageToGreyScale test_thin;;
let bin_thin = Testing.simpleBinarize grey_thin.matrix;;
Testing.displayBin bin_thin;;
let bin_rev = Image_Processing.reverseBin bin_thin;;
Testing.displayBin bin_rev;;
let thin = Image_Processing.thinning bin_rev;;
Testing.displayBin thin;;

(* Thining *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let thin1 = Image_Processing.fullThining grey_test.matrix Image_Processing.one_thining_guohall 16;;
let thin2 = Image_Processing.fullThining grey_test.matrix Image_Processing.one_thining_zhangsuen 16;;
Testing.displayBin thin1;;

(* Minutae - Crossing Number *)
let grey_test = Images.imageToGreyScale Testing.test_image;;
let thin1 = Image_Processing.fullThining grey_test.matrix Image_Processing.one_thining_guohall 16;;
let thin2 = Image_Processing.fullThining grey_test.matrix Image_Processing.one_thining_zhangsuen 16;;
Minutae.display_minutae thin1;;
